class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(connections.length < n-1) return -1;

        List<List> adj = new ArrayList<>();
        
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0; i<connections.length; i++){
            adj.get(connections[i][0]).add(connections[i][1]);
            adj.get(connections[i][1]).add(connections[i][0]);
        }

        int res=0;

        int visited[] = new int[n];

        
        for(int i=0; i<n; i++){
            if(visited[i]==0){
                res++;
                dfs(visited, adj, i);
            }
        }

        return res-1;
    }

    void dfs(int[] visited, List<List> adj, int n){
        visited[n] = 1;
        for(int i=0; i<adj.get(n).size(); i++){
           // System.out.println(adj.get(n)+" "+i);
            if(visited[(int) adj.get(n).get(i)] == 0){
                dfs(visited, adj, (int) adj.get(n).get(i));
            }
        }
    }
}
